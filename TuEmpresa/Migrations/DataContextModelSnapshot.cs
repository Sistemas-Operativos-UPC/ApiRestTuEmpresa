// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuEmpresa.Data;

#nullable disable

namespace TuEmpresa.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TuEmpresa.Model.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSolicitud")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSolicitud");

                    b.ToTable("comentarios", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("departamentos", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Distrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("distritos", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("estados", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Negocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<int>("IdDistrito")
                        .HasColumnType("int");

                    b.Property<int>("IdProvincia")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoModalidad")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdDistrito");

                    b.HasIndex("IdProvincia");

                    b.HasIndex("IdTipoModalidad");

                    b.ToTable("negocios", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.NombreNegocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdNegocio")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdNegocio");

                    b.ToTable("names", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Notaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<int>("IdDistrito")
                        .HasColumnType("int");

                    b.Property<int>("IdProvincia")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TarifaSocial")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdDistrito");

                    b.HasIndex("IdProvincia");

                    b.ToTable("notarias", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Celular")
                        .HasColumnType("int");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<int>("IdDistrito")
                        .HasColumnType("int");

                    b.Property<int>("IdProvincia")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPersona")
                        .HasColumnType("int");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdDistrito");

                    b.HasIndex("IdProvincia");

                    b.HasIndex("IdTipoDocumento");

                    b.HasIndex("IdTipoPersona");

                    b.ToTable("personas", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("provincias", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Solicitud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int?>("IdNegocio")
                        .HasColumnType("int");

                    b.Property<int?>("IdNotaria")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdNegocio");

                    b.HasIndex("IdNotaria");

                    b.HasIndex("IdPersona");

                    b.ToTable("solicitudes", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tipos_documentos", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.TipoModalidadEmpresarial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tipos_modalidad_empresarial", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tipos_persona", (string)null);
                });

            modelBuilder.Entity("TuEmpresa.Model.Comentario", b =>
                {
                    b.HasOne("TuEmpresa.Model.Solicitud", "Solicitud")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdSolicitud")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("TuEmpresa.Model.Negocio", b =>
                {
                    b.HasOne("TuEmpresa.Model.Departamento", "Departamento")
                        .WithMany("Negocios")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Distrito", "Distrito")
                        .WithMany("Negocios")
                        .HasForeignKey("IdDistrito")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Provincia", "Provincia")
                        .WithMany("Negocios")
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.TipoModalidadEmpresarial", "TipoModalidadEmpresarial")
                        .WithMany("Negocios")
                        .HasForeignKey("IdTipoModalidad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Distrito");

                    b.Navigation("Provincia");

                    b.Navigation("TipoModalidadEmpresarial");
                });

            modelBuilder.Entity("TuEmpresa.Model.NombreNegocio", b =>
                {
                    b.HasOne("TuEmpresa.Model.Estado", "Estado")
                        .WithMany("NombresNegocios")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Negocio", "Negocio")
                        .WithMany("NombresNegocios")
                        .HasForeignKey("IdNegocio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Negocio");
                });

            modelBuilder.Entity("TuEmpresa.Model.Notaria", b =>
                {
                    b.HasOne("TuEmpresa.Model.Departamento", "Departamento")
                        .WithMany("Notarias")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Distrito", "Distrito")
                        .WithMany("Notarias")
                        .HasForeignKey("IdDistrito")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Provincia", "Provincia")
                        .WithMany("Notarias")
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Distrito");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("TuEmpresa.Model.Persona", b =>
                {
                    b.HasOne("TuEmpresa.Model.Departamento", "Departamento")
                        .WithMany("Personas")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Distrito", "Distrito")
                        .WithMany("Personas")
                        .HasForeignKey("IdDistrito")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Provincia", "Provincia")
                        .WithMany("Personas")
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.TipoDocumento", "TipoDocumento")
                        .WithMany("Personas")
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.TipoPersona", "TipoPersona")
                        .WithMany("Personas")
                        .HasForeignKey("IdTipoPersona")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Distrito");

                    b.Navigation("Provincia");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("TuEmpresa.Model.Solicitud", b =>
                {
                    b.HasOne("TuEmpresa.Model.Estado", "Estado")
                        .WithMany("Solicitudes")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuEmpresa.Model.Negocio", "Negocio")
                        .WithMany("Solicitudes")
                        .HasForeignKey("IdNegocio")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TuEmpresa.Model.Notaria", "Notaria")
                        .WithMany("Solicitudes")
                        .HasForeignKey("IdNotaria")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TuEmpresa.Model.Persona", "Persona")
                        .WithMany("Solicitudes")
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Negocio");

                    b.Navigation("Notaria");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("TuEmpresa.Model.Departamento", b =>
                {
                    b.Navigation("Negocios");

                    b.Navigation("Notarias");

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("TuEmpresa.Model.Distrito", b =>
                {
                    b.Navigation("Negocios");

                    b.Navigation("Notarias");

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("TuEmpresa.Model.Estado", b =>
                {
                    b.Navigation("NombresNegocios");

                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("TuEmpresa.Model.Negocio", b =>
                {
                    b.Navigation("NombresNegocios");

                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("TuEmpresa.Model.Notaria", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("TuEmpresa.Model.Persona", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("TuEmpresa.Model.Provincia", b =>
                {
                    b.Navigation("Negocios");

                    b.Navigation("Notarias");

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("TuEmpresa.Model.Solicitud", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("TuEmpresa.Model.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("TuEmpresa.Model.TipoModalidadEmpresarial", b =>
                {
                    b.Navigation("Negocios");
                });

            modelBuilder.Entity("TuEmpresa.Model.TipoPersona", b =>
                {
                    b.Navigation("Personas");
                });
#pragma warning restore 612, 618
        }
    }
}
